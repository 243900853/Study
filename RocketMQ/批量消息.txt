    //发送批量消息
    public static void main(String[] args) throws Exception {
        DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
        producer.setNamesrvAddr("localhost:9876");
        producer.start();
        List<Message> list = new ArrayList<Message>();
        for (int i = 0; i < 10; i++) {
            Message msg = new Message("TopicTest" /* Topic */,"TagA" /* Tag */,
                    ("Hello RocketMQ " + i).getBytes(RemotingHelper.DEFAULT_CHARSET) /* Message body */
            );
            list.add(msg);
        }
        //发送批量消息,一次发送list.length条记录，不支持延迟、过滤、事务
        //每次发送最好不超过1M（topic名称长度+消息传过去的参数+消息体大小+20byte日志数据大小=单条消息大小），超过4M会报错
        SendResult sendResult = producer.send(list);
        System.out.printf("%s%n", sendResult);
//        //大批量数据进行数据截取后，在发送消息
//        ListSplitter splitter = new ListSplitter(list);
//        while (splitter.hasNext()) {
//            try {
//                List<Message>  listItem = splitter.next();
//                SendResult sendResult = producer.send(listItem);
//                System.out.printf("%s%n", sendResult);
//            } catch (Exception e) {
//                e.printStackTrace();
//                //handle the error
//            }
//        }
        producer.shutdown();
    }

    //多线程多队列消费无序消息
    public static void main(String[] args) throws InterruptedException, MQClientException {
        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("please_rename_unique_group_name");
        consumer.setNamesrvAddr("localhost:9876");
        //注意这里的topic要和消费者的topic一致
        consumer.subscribe("TopicTest", "*");
        consumer.registerMessageListener(new MessageListenerConcurrently() {
            @Override
            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {
                for (MessageExt msg : msgs) {
                    System.out.printf("%s Receive New Messages: %s %n", Thread.currentThread().getName(), new String(msg.getBody()));
                }
//                System.out.printf("%s Receive New Messages: %s %n", Thread.currentThread().getName(), msgs);
                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
            }
        });
        consumer.start();
        System.out.printf("Consumer Started.%n");
    }